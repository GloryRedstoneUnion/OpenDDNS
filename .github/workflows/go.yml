# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go CI & Release

on:
  push:
    tags: [ 'v*' ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'
      - name: Download Go modules
        run: go mod download
      - name: Build
        run: go build -v ./...
      - name: Test
        run: go test -v ./...

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'
      - name: Download Go modules
        run: go mod download
      - name: Set version vars
        id: vars
        run: |
          echo "::set-output name=VERSION::${GITHUB_REF#refs/tags/}"
          echo "::set-output name=BUILDTIME::$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      - name: Build Windows amd64
        run: |
          mkdir -p dist
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-windows-amd64.exe .
      - name: Build Windows arm64
        run: |
          GOOS=windows GOARCH=arm64 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-windows-arm64.exe .
      - name: Build Linux amd64
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-linux-amd64 .
      - name: Build Linux arm64
        run: |
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-linux-arm64 .
      - name: Build Linux 386
        run: |
          GOOS=linux GOARCH=386 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-linux-386 .
      - name: Build Linux arm
        run: |
          GOOS=linux GOARCH=arm go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-linux-arm .
      - name: Build Darwin amd64
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-darwin-amd64 .
      - name: Build Darwin arm64
        run: |
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-darwin-arm64 .
      - name: Build FreeBSD amd64
        run: |
          GOOS=freebsd GOARCH=amd64 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-freebsd-amd64 .
      - name: Build FreeBSD arm64
        run: |
          GOOS=freebsd GOARCH=arm64 go build -ldflags "-X main.Version=${{ steps.vars.outputs.VERSION }} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o dist/OpenDDNS-${{ steps.vars.outputs.VERSION }}-freebsd-arm64 .
      - name: Get release notes
        id: notes
        run: |
          if [ -f .github/release/releasenote.md ]; then
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            cat .github/release/releasenote.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            NOTES=$(git tag -l --format='%(contents)' ${{ steps.vars.outputs.VERSION }} | tail -n +2)
            if [ -z "$NOTES" ]; then
              NOTES="Auto release for ${{ steps.vars.outputs.VERSION }}"
            fi
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          body: ${{ steps.notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
