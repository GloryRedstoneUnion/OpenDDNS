# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go CI & Release

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Build
        run: go build -v ./...
      - name: Test
        run: go test -v ./...

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Set version vars
        id: vars
        run: |
          echo "::set-output name=VERSION::${GITHUB_REF#refs/tags/}"
          echo "::set-output name=BUILDTIME::$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      - name: Build binaries
        run: |
          mkdir dist
          VERSION=${{ steps.vars.outputs.VERSION }}
          platforms=(
            'windows amd64' 'windows arm64'
            'linux amd64' 'linux arm64' 'linux 386' 'linux arm'
            'darwin amd64' 'darwin arm64'
            'freebsd amd64' 'freebsd arm64'
          )
          for plat in "${platforms[@]}"; do
            os=${plat%% *}
            arch=${plat##* }
            out="dist/OpenDDNS-${VERSION}-${os}-${arch}"
            [ "$os" = "windows" ] && out+='.exe'
            GOOS=$os GOARCH=$arch go build -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${{ steps.vars.outputs.BUILDTIME }}" -o "$out" .
          done
      - name: Get release notes
        id: notes
        run: |
          # 优先用 tag message，否则自动生成
          NOTES=$(git tag -l --format='%(contents)' ${{ steps.vars.outputs.VERSION }} | tail -n +2)
          if [ -z "$NOTES" ]; then
            NOTES="Auto release for ${{ steps.vars.outputs.VERSION }}"
          fi
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          body: ${{ steps.notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
